{"version":3,"sources":["max-counters.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA,SAAS,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE;AACpB,QAAI,cAAc;QAAE,GAAG,GAAG,CAAC;QAAE,QAAQ,GAAG,CAAC,CAAC;AAC1C,QAAI,YAAY,GAAG,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;AAE/C,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC/B,sBAAc,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,YAAI,cAAc,IAAI,CAAC,IAAI,cAAc,IAAI,CAAC,EAAE;;AAE5C,gBAAI,YAAY,CAAC,cAAc,GAAG,CAAC,CAAC,GAAG,QAAQ,EAAE;AAC7C,4BAAY,CAAC,cAAc,GAAG,CAAC,CAAC,GAAG,QAAQ,GAAG,CAAC,CAAC;aACnD,MAAM;AACH,4BAAY,CAAC,cAAc,GAAG,CAAC,CAAC,EAAE,CAAC;aACtC;;AAED,gBAAI,YAAY,CAAC,cAAc,GAAG,CAAC,CAAC,GAAG,GAAG,EAAE;AACxC,mBAAG,GAAG,YAAY,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC;aAC1C;SACJ,MAAM;AACH,oBAAQ,GAAG,GAAG,CAAC;SAClB;KACJ;;AAED,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC1C,YAAI,YAAY,CAAC,CAAC,CAAC,GAAG,QAAQ,EAAE;AAC5B,wBAAY,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC;SAC9B;KACJ;AACD,WAAO,YAAY,CAAC;CACvB;;AAGD,SAAS,qBAAqB,CAAC,IAAI,EAAE,GAAG,EAAE;AACtC,QAAI,CAAC,GAAG,EAAE,CAAC;AACX,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;AAC3B,SAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACf;;AAED,WAAO,CAAC,CAAC;CACZ;;AAED,SAAS,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE;AAC9B,gBAAY,CAAC;AACb,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACjC,WAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;KAChB;CACJ;;AAED,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC","file":"max-counters-compiled.js","sourcesContent":["/**\n * Created by joebm08 on 12/22/15.\n * You are given N counters, initially set to 0, and you have two possible operations on them:\n\n increase(X) − counter X is increased by 1,\n max counter − all counters are set to the maximum value of any counter.\n A non-empty zero-indexed array A of M integers is given. This array represents consecutive operations:\n\n if A[K] = X, such that 1 ≤ X ≤ N, then operation K is increase(X),\n if A[K] = N + 1 then operation K is max counter.\n For example, given integer N = 5 and array A such that:\n\n A[0] = 3\n A[1] = 4\n A[2] = 4\n A[3] = 6\n A[4] = 1\n A[5] = 4\n A[6] = 4\n the values of the counters after each consecutive operation will be:\n\n (0, 0, 1, 0, 0)\n (0, 0, 1, 1, 0)\n (0, 0, 1, 2, 0)\n (2, 2, 2, 2, 2)\n (3, 2, 2, 2, 2)\n (3, 2, 2, 3, 2)\n (3, 2, 2, 4, 2)\n The goal is to calculate the value of every counter after all operations.\n\n Write a function:\n\n function solution(N, A);\n\n that, given an integer N and a non-empty zero-indexed array A consisting of M integers, returns a sequence of integers representing the values of the counters.\n\n The sequence should be returned as:\n\n a structure Results (in C), or\n a vector of integers (in C++), or\n a record Results (in Pascal), or\n an array of integers (in any other programming language).\n For example, given:\n\n A[0] = 3\n A[1] = 4\n A[2] = 4\n A[3] = 6\n A[4] = 1\n A[5] = 4\n A[6] = 4\n the function should return [3, 2, 2, 4, 2], as explained above.\n\n Assume that:\n\n N and M are integers within the range [1..100,000];\n each element of array A is an integer within the range [1..N + 1].\n Complexity:\n\n expected worst-case time complexity is O(N+M);\n expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).\n Elements of input arrays can be modified.\n */\n\n// you can write to stdout for debugging purposes, e.g.\n// console.log('this is a debug message');\n\nfunction solution(N, A) {\n    var operationValue, max = 0, lastBase = 0;\n    var counterArray = getArrayWithSetValues(N, 0);\n\n    for (var i = 0; i < A.length; i++) {\n        operationValue = A[i];\n        if (operationValue >= 1 && operationValue <= N) {\n\n            if (counterArray[operationValue - 1] < lastBase) {\n                counterArray[operationValue - 1] = lastBase + 1;\n            } else {\n                counterArray[operationValue - 1]++;\n            }\n\n            if (counterArray[operationValue - 1] > max) {\n                max = counterArray[operationValue - 1];\n            }\n        } else {\n            lastBase = max;\n        }\n    }\n\n    for (var x = 0; x < counterArray.length; x++) {\n        if (counterArray[x] < lastBase) {\n            counterArray[x] = lastBase;\n        }\n    }\n    return counterArray;\n}\n\n\nfunction getArrayWithSetValues(size, val) {\n    var A = [];\n    for (var i = 0; i < size; i++) {\n        A.push(val);\n    }\n\n    return A;\n}\n\nfunction setArrayValues(arr, val) {\n    \"use strict\";\n    for (var i = 0; i < arr.length; i++) {\n        arr[i] = val;\n    }\n}\n\nconsole.log(solution(5, [70, 7, 7, 7, 7]));"]}