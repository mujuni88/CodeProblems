{"version":3,"sources":["binary-search-tree.js"],"names":[],"mappings":";;;;;;;;AAMA,SAAS,OAAO,CAAC,IAAI,EAAC;AAClB,QAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,QAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,QAAI,CAAC,KAAK,GAAG,IAAI,CAAC;CACrB;;AAED,SAAS,MAAM,CAAC,IAAI,EAAE,IAAI,EAAC;AACvB,QAAG,CAAC,IAAI,EAAC;AACL,YAAI,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;AACxB,YAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,YAAI,CAAC,KAAK,GAAG,IAAI,CAAC;KACrB,MAAM,IAAG,IAAI,IAAI,IAAI,CAAC,IAAI,EAAC;AACxB,YAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KACvC,MAAK;AACF,YAAI,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;KACzC;;AAED,WAAO,IAAI,CAAC;CACf;AACD,SAAS,UAAU,CAAC,IAAI,EAAC;AACrB,WAAO,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC;CAC5B;;AAED,SAAS,MAAM;;;8BAAY;YAAX,IAAI;YAAE,IAAI;;;AACtB,YAAG,CAAC,IAAI,EAAC;AACL,mBAAO,KAAK,CAAC;SAChB,MAAM,IAAG,IAAI,CAAC,IAAI,KAAK,IAAI,EAAC;AACzB,mBAAO,IAAI,CAAC;SACf,MAAM,IAAG,IAAI,GAAG,IAAI,CAAC,IAAI,EAAC;iBACT,IAAI,CAAC,IAAI;kBAAE,IAAI;;;SAChC,MAAK;iBACY,IAAI,CAAC,KAAK;kBAAE,IAAI;;;SACjC;KACJ;CAAA;;AAED,SAAS,UAAU,CAAC,IAAI,EAAC;AACrB,QAAG,IAAI,CAAC,IAAI,EAAC;AACT,kBAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACzB;AACD,QAAG,IAAI,EAAC;AACJ,eAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC1B;;AAED,QAAG,IAAI,CAAC,KAAK,EAAC;AACV,kBAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC1B;CAEJ;;AAED,IAAI,IAAI,GAAG,IAAI,CAAC;AAChB,IAAI,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AACtB,IAAI,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AACvB,IAAI,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AACvB,IAAI,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AACvB,IAAI,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AACvB,IAAI,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AACvB,IAAI,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;;AAExB,UAAU,CAAC,IAAI,CAAC,CAAC","file":"binary-search-tree-compiled.js","sourcesContent":["/**\n * Created by joebm08 on 1/6/16.\n * \n * Javascript implementation of Binary Search Tree\n */\n\nfunction BstNode(data){\n    this.data = data;\n    this.left = null;\n    this.right = null;\n}\n\nfunction insert(root, data){\n    if(!root){\n        root = getNewNode(data);\n        root.left = null;\n        root.right = null;\n    } else if(data <= root.data){\n        root.left = insert(root.left, data);\n    } else{\n        root.right = insert(root.right, data);\n    }\n\n    return root;\n}\nfunction getNewNode(data){\n    return new BstNode(data);\n}\n\nfunction search(root, data){\n    if(!root){\n        return false;\n    } else if(root.data === data){\n        return true;\n    } else if(data < root.data){\n        return search(root.left, data);\n    } else{\n        return search(root.right, data);\n    }\n}\n\nfunction logInorder(root){\n    if(root.left){\n        logInorder(root.left);\n    }\n    if(root){\n        console.log(root.data);\n    }\n    \n    if(root.right){\n        logInorder(root.right);\n    }\n    \n}\n\nvar root = null;\nroot = insert(root, 5);\n root = insert(root, 7);\n root = insert(root, 6);\n root = insert(root, 9);\n root = insert(root, 4); \n root = insert(root, 4); \n root = insert(root, 5); \n\nlogInorder(root);\n"]}