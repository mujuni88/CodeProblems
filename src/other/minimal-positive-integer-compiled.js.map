{"version":3,"sources":["minimal-positive-integer.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,SAAS,QAAQ,CAAC,CAAC,EAAE;AACjB,QAAI,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AACpB,QAAI,SAAS,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;;AAEhC,QAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,EAAC;AAClB,WAAG,GAAG,CAAC,CAAC;KACX;;AAED,SAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;AAC7B,YAAG,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,EAAC;AACjB,mBAAO,GAAG,CAAC;SACd;KACJ;;AAED,WAAO,EAAE,GAAG,CAAC;CAChB;;AAED,SAAS,MAAM,CAAC,CAAC,EAAC;AACd,QAAI,GAAG,GAAG,QAAQ,CAAC;;AAEnB,KAAC,CAAC,OAAO,CAAC,UAAS,IAAI,EAAC;AACpB,YAAG,IAAI,GAAG,GAAG,EAAC;AACV,eAAG,GAAG,IAAI,CAAC;SACd;KACJ,CAAC,CAAC;;AAEH,WAAO,GAAG,CAAC;CACd;;AAED,SAAS,YAAY,CAAC,CAAC,EAAC;AACpB,QAAI,SAAS,GAAG,EAAE,CAAC;;AAEnB,KAAC,CAAC,OAAO,CAAC,UAAS,IAAI,EAAC;AACpB,YAAG,CAAC,SAAS,CAAC,IAAI,CAAC,EAAC;AAChB,qBAAS,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;SAC1B;KACJ,CAAC,CAAC;;AAEH,WAAO,SAAS,CAAC;CACpB;;AAED,IAAI,CAAC,GAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,CAAC,CAAC,CAAC;AACzB,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC","file":"minimal-positive-integer-compiled.js","sourcesContent":["/**\n * Created by joebm08 on 12/22/15.\n * \n * Write a function:\n\n function solution(A);\n\n that, given a non-empty zero-indexed array A of N integers, returns the minimal positive integer (greater than 0) that does not occur in A.\n\n For example, given:\n\n A[0] = 1\n A[1] = 3\n A[2] = 6\n A[3] = 4\n A[4] = 1\n A[5] = 2\n the function should return 5.\n\n Assume that:\n\n N is an integer within the range [1..100,000];\n each element of array A is an integer within the range [âˆ’2,147,483,648..2,147,483,647].\n Complexity:\n\n expected worst-case time complexity is O(N);\n expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).\n Elements of input arrays can be modified.\n */\n// you can write to stdout for debugging purposes, e.g.\n// console.log('this is a debug message');\n\nfunction solution(A) {\n    var min = getMin(A);\n    var uniqItems = getUniqItems(A);\n\n    if(min < 0 || min > 0){\n        min = 0;\n    }\n    \n    for(var i = 0; i < A.length; i++){\n        if(!uniqItems[++min]){\n            return min;\n        }\n    }\n\n    return ++min;\n}\n\nfunction getMin(A){\n    var min = Infinity;\n\n    A.forEach(function(item){\n        if(item < min){\n            min = item;\n        }\n    });\n\n    return min;\n}\n\nfunction getUniqItems(A){\n    var uniqItems = {};\n\n    A.forEach(function(item){\n        if(!uniqItems[item]){\n            uniqItems[item] = item;\n        }\n    });\n\n    return uniqItems;\n}\n\nvar A =  [-1, 0, 1, 2,3];\nconsole.log(solution(A));"]}