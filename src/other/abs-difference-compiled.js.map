{"version":3,"sources":["abs-difference.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,CAAC,CAAC;AAChC,SAAS,SAAS,CAAC,CAAC,EAAE;;;;;AAKlB,QAAI,KAAK,GAAG,CAAC;QAAE,OAAO,GAAG,QAAQ;QAAE,CAAC,GAAG,CAAC,CAAC;;;AAGzC,QAAG,CAAC,CAAC,MAAM,IAAI,CAAC,EAAC;AACb,eAAO,CAAC,CAAC,CAAC;KACb;;;AAGD,WAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAC;AACf,aAAK,GAAG,CAAC,CAAC;;AAEV,SAAC,CAAC,OAAO,CAAC,UAAS,GAAG,EAAE,CAAC,EAAC;;AAEtB,gBAAG,CAAC,GAAG,CAAC,EAAC;;AAEL,qBAAK,IAAI,GAAG,CAAC;aAChB,MAAK;;;AAEF,qBAAK,IAAI,GAAG,CAAC;aAChB;SACJ,CAAC,CAAC;;AAEH,aAAK,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAC,CAAC,CAAC,CAAC,CAAC;;AAErC,WAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;AACd,YAAG,KAAK,GAAG,OAAO,EAAC;;AAEf,mBAAO,GAAG,KAAK,CAAC;SACnB;;AAED,SAAC,EAAE,CAAC;KACP;AACD,WAAO,OAAO,CAAC;CAElB;;AAED,SAAS,SAAS,CAAC,CAAC,EAAC;;AAEjB,QAAI,KAAK,GAAG,CAAC;QACT,GAAG;QACH,IAAI;QACJ,OAAO,GAAG,QAAQ,CAAC;;AAEvB,QAAG,CAAC,CAAC,MAAM,GAAG,CAAC,EAAC;AACZ,eAAO,CAAC,CAAC,CAAC;KACb;;AAED,OAAG,GAAG,WAAW,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;;AAEvB,KAAC,CAAC,OAAO,CAAC,UAAS,GAAG,EAAE,CAAC,EAAC;AACtB,aAAK,GAAG,KAAK,GAAG,GAAG,CAAC;AACpB,YAAI,GAAG,KAAK,IAAI,GAAG,GAAG,KAAK,CAAA,AAAC,CAAC;;AAE7B,YAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;;AAEpC,WAAG,CAAC,CAAC,GAAC,CAAC,EAAE,IAAI,CAAC,CAAC;AACf,YAAG,IAAI,GAAG,OAAO,EAAC;AACd,mBAAO,GAAG,IAAI,CAAC;SAClB;KACJ,CAAC,CAAC;;AAEH,WAAO,OAAO,CAAC;CAClB;AACD,SAAS,WAAW,CAAC,GAAG,EAAE,OAAO,EAAC;AAC9B,QAAI,OAAO,GAAG,SAAV,OAAO,CAAY,IAAI,EAAE,IAAI,EAAC;AAC9B,eAAO,IAAI,GAAE,IAAI,CAAC;KACrB,CAAA;;AAED,WAAO,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;CACvC;;AAED,OAAO,CAAC,GAAG,CAAC,UAAU,GAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;;AAErC,SAAS,GAAG,CAAC,CAAC,EAAC,KAAK,EAAC;AACjB,gBAAY,CAAC;AACb,WAAO,CAAC,GAAG,UAAQ,CAAC,uBAAkB,KAAK,CAAG,CAAC;CAClD","file":"abs-difference-compiled.js","sourcesContent":["/**\n A non-empty zero-indexed array A consisting of N integers is given. Array A represents numbers on a tape.\n\n Any integer P, such that 0 < P < N, splits this tape into two non-empty parts: A[0], A[1], ..., A[P − 1] and A[P], A[P + 1], ..., A[N − 1].\n\n The difference between the two parts is the value of: |(A[0] + A[1] + ... + A[P − 1]) − (A[P] + A[P + 1] + ... + A[N − 1])|\n\n In other words, it is the absolute difference between the sum of the first part and the sum of the second part.\n\n For example, consider array A such that:\n\n A[0] = 3\n A[1] = 1\n A[2] = 2\n A[3] = 4\n A[4] = 3\n We can split this tape in four places:\n\n P = 1, difference = |3 − 10| = 7\n P = 2, difference = |4 − 9| = 5\n P = 3, difference = |6 − 7| = 1\n P = 4, difference = |10 − 3| = 7\n Write a function:\n\n function solution(A);\n\n that, given a non-empty zero-indexed array A of N integers, returns the minimal difference that can be achieved.\n\n For example, given:\n\n A[0] = 3\n A[1] = 1\n A[2] = 2\n A[3] = 4\n A[4] = 3\n the function should return 1, as explained above.\n\n Assume that:\n\n N is an integer within the range [2..100,000];\n each element of array A is an integer within the range [−1,000..1,000].\n Complexity:\n\n expected worst-case time complexity is O(N);\n expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).\n Elements of input arrays can be modified.\n */\n\nvar A = [3, 1, 2, 4, 3,10,11,3];\nfunction solution1(A) {\n    // write your code in JavaScript (Node.js 4.0.0)\n\n// initialize\n    // total = 0; minDiff = -infinity; P = 1; \n    var total = 0, minDiff = Infinity, P = 1;\n\n// array length can't be less than P\n    if(A.length <= P){\n        return -1;\n    }\n\n// while P < length;\n    while(P < A.length){\n        total = 0;\n        // loop through whole array\n        A.forEach(function(num, i){\n            //if index is less than P\n            if(i < P){\n                //sum += array[i]\n                total += num;\n            } else{ // else - we are at P\n                // sum -= array[i]\n                total -= num;\n            }\n        });\n        // is sum < minDiff\n        total = Math.sqrt(Math.pow(total,2));\n        \n        log(P, total);\n        if(total < minDiff){\n            // minDiff = sum;\n            minDiff = total;\n        }\n\n        P++;\n    }\n    return minDiff;\n\n}\n\nfunction solution2(A){\n// init val\n    var total = 0,\n        sum,\n        diff,\n        minDiff = Infinity;\n\n    if(A.length < 2){\n        return -1;\n    }\n\n    sum = getArraySum(A,0);\n\n    A.forEach(function(num, i){\n        total = total + num;\n        diff = total - (sum - total);\n\n        diff = Math.sqrt(Math.pow(diff, 2));\n\n        log(i+1, diff);\n        if(diff < minDiff){\n            minDiff = diff;\n        }\n    });\n\n    return minDiff;\n}\nfunction getArraySum(arr, initVal){\n    var reducer = function(prev, next){\n        return prev+ next;\n    }\n\n    return arr.reduce(reducer, initVal);\n}\n\nconsole.log('ABS Min '+solution2(A));\n\nfunction log(P,total){\n    \"use strict\";\n    console.log(`P = ${P}, difference = ${total}`);\n}"]}